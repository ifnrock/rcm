Архитектура приложения

Приложение состоит из двух частей. Каждая часть представляет из себя демон на Go.

Один демон перечитывает access.log, парсит его, формирует пользовательские сессии, кластеризует и складывает результат в БД.

В качестве БД выбран Redis. Redis не является оптимальным решением, если необходимо "персистентное" хранилище данных. Redis в основном используется в качестве кэширующего прокси. Но Redis для данной задачи подходит в силу следующих причин:
"схема базы" предельно проста и хранить по сути необходимо только матрицу профиль X урл,
потеря данных не критична,
скорость чтения из базы при вычислении рекомендации в ответ на запрос приоритетна.

Пересчет матрицы необходимо как-то триггерить. Самым простым решением является периодический запуск процедуры по расписанию. Для этого, например, можно прописать в cron отправку выделенного сигнала демону. При обработке сигнала демон перечитает лог запросов к серверу и обновит матрицу в базе.

Приложение, вычисляющее рекомендации, реализовано как readonly REST-сервис. Сервис принимает по HTTP POST-запросы с сессией пользователя в json формате и возвращает json со словарём оценок.

Словарь рекомендаций вычисляется в рантайме. В действительности, это необязательно. Рекомедации можно посчитать предварительно для каждой возможной сессии пользователя заранее и сохранить в БД. Делать это можно опционально в демоне, парсящем лог веб-сервера. Сохранение уже посчитанных рекомендаций в БД позволит свести к минимуму задержку сервера при обработке запроса (response latency).

В зависимости от типа операционной системы демоны будут управляться различными "супервизорами". В реализуемом приложении выбран runit.
